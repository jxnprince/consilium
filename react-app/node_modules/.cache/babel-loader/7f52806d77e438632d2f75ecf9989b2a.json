{"ast":null,"code":"// constants\nconst SET_USER = \"session/SET_USER\";\nconst REMOVE_USER = \"session/REMOVE_USER\";\n\nconst setUser = user => ({\n  type: SET_USER,\n  payload: user\n});\n\nconst removeUser = () => ({\n  type: REMOVE_USER\n}); // thunks\n\n\nexport const authenticate = () => async dispatch => {\n  const response = await fetch('/api/auth/', {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (data.errors) {\n    return;\n  }\n\n  dispatch(setUser(data));\n};\nexport const login = (email, password) => async dispatch => {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n\n  if (data.errors) {\n    return data;\n  }\n\n  dispatch(setUser(data));\n  return {};\n};\nexport const logout = () => async dispatch => {\n  const response = await fetch(\"/api/auth/logout\", {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  dispatch(removeUser());\n};\nexport const signUp = (username, email, password) => async dispatch => {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  dispatch(setUser(data));\n}; // reducer\n\nconst initialState = {\n  user: null\n}; // useSelector(state => state.session.user)\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        user: action.payload\n      };\n\n    case REMOVE_USER:\n      return {\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jacksonprince/Coding/Module 7/Consilium/react-app/src/store/session.js"],"names":["SET_USER","REMOVE_USER","setUser","user","type","payload","removeUser","authenticate","dispatch","response","fetch","headers","data","json","errors","login","email","password","method","body","JSON","stringify","logout","console","log","signUp","username","initialState","reducer","state","action"],"mappings":"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","sourcesContent":["// constants\nconst SET_USER = \"session/SET_USER\";\nconst REMOVE_USER = \"session/REMOVE_USER\";\n\nconst setUser = (user) => ({\n    type: SET_USER,\n    payload: user\n})\n\nconst removeUser = () => ({\n    type: REMOVE_USER\n})\n\n\n\n// thunks\nexport const authenticate = () => async (dispatch) => {\n    const response = await fetch('/api/auth/', {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const data = await response.json();\n    if (data.errors) {\n        return;\n    }\n    dispatch(setUser(data))\n    \n}\n\nexport const login = (email, password) => async (dispatch) => {\n    const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n    if (data.errors) {\n        return data;\n    }\n    dispatch(setUser(data));\n    return {};\n}\n\nexport const logout = () => async (dispatch) => {\n    const response = await fetch(\"/api/auth/logout\", {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    });\n    const data = await response.json();\n    console.log(data)\n    dispatch(removeUser());\n};\n\n\nexport const signUp = (username, email, password) => async (dispatch)=> {\n    const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            username,\n            email,\n            password,\n        }),\n    });\n    const data = await response.json();\n    dispatch(setUser(data));\n}\n\n// reducer\n\nconst initialState = { user: null };\n\n// useSelector(state => state.session.user)\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_USER:\n            return { user: action.payload };\n        case REMOVE_USER:\n            return { user: null };\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}